#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define TAM_FILA 5   // Tamanho fixo da fila de pe√ßas futuras
#define TAM_PILHA 3  // Capacidade m√°xima da pilha de reserva

// Estrutura que representa uma pe√ßa
typedef struct {
    char nome;  // Tipo ('I', 'O', 'T', 'L')
    int id;     // Identificador √∫nico
} Peca;

// Estrutura da fila circular
typedef struct {
    Peca pecas[TAM_FILA];
    int frente;
    int tras;
    int quantidade;
} Fila;

// Estrutura da pilha
typedef struct {
    Peca pecas[TAM_PILHA];
    int topo;
} Pilha;

// ---------- Fun√ß√µes da fila ----------

// Inicializa a fila
void inicializarFila(Fila *fila) {
    fila->frente = 0;
    fila->tras = -1;
    fila->quantidade = 0;
}

// Verifica se a fila est√° cheia
int filaCheia(Fila *fila) {
    return fila->quantidade == TAM_FILA;
}

// Verifica se a fila est√° vazia
int filaVazia(Fila *fila) {
    return fila->quantidade == 0;
}

// Insere nova pe√ßa no final da fila
void inserirFila(Fila *fila, Peca nova) {
    if (filaCheia(fila)) return;
    fila->tras = (fila->tras + 1) % TAM_FILA;
    fila->pecas[fila->tras] = nova;
    fila->quantidade++;
}

// Remove pe√ßa da frente da fila
Peca removerFila(Fila *fila) {
    Peca removida = {'-', -1};
    if (filaVazia(fila)) return removida;
    removida = fila->pecas[fila->frente];
    fila->frente = (fila->frente + 1) % TAM_FILA;
    fila->quantidade--;
    return removida;
}

// ---------- Fun√ß√µes da pilha ----------

// Inicializa a pilha
void inicializarPilha(Pilha *pilha) {
    pilha->topo = -1;
}

// Verifica se a pilha est√° cheia
int pilhaCheia(Pilha *pilha) {
    return pilha->topo == TAM_PILHA - 1;
}

// Verifica se a pilha est√° vazia
int pilhaVazia(Pilha *pilha) {
    return pilha->topo == -1;
}

// Empilha uma pe√ßa
void empilhar(Pilha *pilha, Peca nova) {
    if (pilhaCheia(pilha)) {
        printf("\n‚ö†Ô∏è A pilha est√° cheia! N√£o √© poss√≠vel reservar mais pe√ßas.\n");
        return;
    }
    pilha->pecas[++pilha->topo] = nova;
}

// Desempilha uma pe√ßa
Peca desempilhar(Pilha *pilha) {
    Peca removida = {'-', -1};
    if (pilhaVazia(pilha)) {
        printf("\n‚ö†Ô∏è A pilha est√° vazia! Nenhuma pe√ßa reservada dispon√≠vel.\n");
        return removida;
    }
    removida = pilha->pecas[pilha->topo--];
    return removida;
}

// ---------- Gera√ß√£o e exibi√ß√£o ----------

// Gera uma nova pe√ßa com tipo aleat√≥rio
Peca gerarPeca(int id) {
    char tipos[] = {'I', 'O', 'T', 'L'};
    Peca nova;
    nova.nome = tipos[rand() % 4];
    nova.id = id;
    return nova;
}

// Exibe o estado atual da fila e da pilha
void exibirEstado(Fila *fila, Pilha *pilha) {
    printf("\n===== ESTADO ATUAL =====\n");

    // Exibir fila
    printf("Fila de pe√ßas:\t");
    if (filaVazia(fila)) {
        printf("(vazia)");
    } else {
        int i, pos = fila->frente;
        for (i = 0; i < fila->quantidade; i++) {
            printf("[%c %d] ", fila->pecas[pos].nome, fila->pecas[pos].id);
            pos = (pos + 1) % TAM_FILA;
        }
    }
    printf("\n");

    // Exibir pilha
    printf("Pilha de reserva (Topo -> Base):\t");
    if (pilhaVazia(pilha)) {
        printf("(vazia)");
    } else {
        for (int i = pilha->topo; i >= 0; i--) {
            printf("[%c %d] ", pilha->pecas[i].nome, pilha->pecas[i].id);
        }
    }
    printf("\n=========================\n");
}

// ---------- Fun√ß√£o principal ----------

int main() {
    Fila fila;
    Pilha pilha;
    int opcao;
    int contador = 0;  // Controla o ID √∫nico das pe√ßas
    Peca p;

    srand(time(NULL));
    inicializarFila(&fila);
    inicializarPilha(&pilha);

    // Inicializa fila com 5 pe√ßas
    for (int i = 0; i < TAM_FILA; i++) {
        inserirFila(&fila, gerarPeca(contador++));
    }

    do {
        exibirEstado(&fila, &pilha);

        printf("\nOp√ß√µes de a√ß√£o:\n");
        printf("1 - Jogar pe√ßa\n");
        printf("2 - Reservar pe√ßa\n");
        printf("3 - Usar pe√ßa reservada\n");
        printf("0 - Sair\n");
        printf("Op√ß√£o: ");
        scanf("%d", &opcao);

        switch (opcao) {
            case 1:
                // Jogar pe√ßa: remove da fila e gera nova
                p = removerFila(&fila);
                if (p.id != -1)
                    printf("‚û°Ô∏è Pe√ßa jogada: [%c %d]\n", p.nome, p.id);
                inserirFila(&fila, gerarPeca(contador++));
                break;

            case 2:
                // Reservar: move pe√ßa da fila para a pilha
                if (pilhaCheia(&pilha)) {
                    printf("\n‚ö†Ô∏è Pilha cheia! N√£o √© poss√≠vel reservar mais.\n");
                } else {
                    p = removerFila(&fila);
                    if (p.id != -1) {
                        empilhar(&pilha, p);
                        printf("üì¶ Pe√ßa reservada: [%c %d]\n", p.nome, p.id);
                        inserirFila(&fila, gerarPeca(contador++));
                    }
                }
                break;

            case 3:
                // Usar pe√ßa reservada: desempilha
                p = desempilhar(&pilha);
                if (p.id != -1)
                    printf("‚úÖ Pe√ßa usada da reserva: [%c %d]\n", p.nome, p.id);
                break;

            case 0:
                printf("\nEncerrando o jogo...\n");
                break;

            default:
                printf("\n‚ùå Op√ß√£o inv√°lida!\n");
        }

    } while (opcao != 0);

    return 0;
}
